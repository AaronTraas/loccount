David Wheeler wrote the following about sloccount.  This is excerpted from
a much longer TODO with many issues that have been solved by the Go port.

Obviously, a general "TODO" is adding support for other computer languages;
here are languages I'd like to add support for specifically:
+ CORBA IDL.
+ Forth.  Comments can start with "\" (backslash) and continue to end-of-line,
  or be surrounded by parens.  In both cases, they must be on word
  bounds-- .( is not a comment!  Variable names often begin with "\"!
  For example:
    : 2dup ( n1 n2 -- n1 n2 n1 n2 ) \ Duplicate two numbers.
                                    \ Pronounced: two-dupe.
        over over  ;
  Strings begin with " (doublequote) or p" (p doublequote, for
  packed strings), and these must be separate words
  (e.g., followed by a whitespace).  They end with a matching ".
  Also, the ." word begins a string that ends in " (this word immediately
  prints it the given string).
  Note that "copy is a perfectly legitimate Forth word, and does NOT
  start a string.
  Forth sources can be stored as blocks, or as more conventional text.
  Any way to detect them?
  See http://www.forth.org/dpans/dpans.html for syntax definition.
  See also http://www.taygeta.com/forth_style.html
  and http://www.forth.org/fig.html
+ Create a "javascript" category. ".js" extention, "js" type.
  (see below for a discussion of the issues with embedded scripts)
+ .pco -> Oracle preprocessed Cobol Code
+ .pfo -> Oracle preprocessed Fortran Code
+ BASIC, including Visual Basic, Future Basic, GW-Basic, QBASIC, etc.
+ Improve Ocamlyacc, comments in yacc part are C-like, but I'm not sure
  about comment nesting. 

  For more language examples, see the ACM "Hello World" project, which tries
  to collect "Hello World" in every computer language. It's at:
   http://www2.latech.edu/~acm/HelloWorld.shtml

Here are other TODOs:

* A big one is to add support for logical SLOC, at least for C/C++.
  Then add support for COCOMO II.  Even partial support would be great
  (e.g., not all languages)... other languages could be displayed as
  "UNK" (unknown) and be considered 0.
  Add options to allow display of only one,
  or of both.  See Park's paper, COCOMO II, and Humphrey's 1995 book.

* Handle scripts embedded in data.
  Perhaps create a category, "only the code embedded in HTML"
  (e.g., Javascript scripts, PHP statements, etc.).
  This is currently complicated - the whole program assumes that a file
  can be assigned a specific type, and HTML (etc.) might have multiple
  languages embedded in it.

* Are any CGI files (.cgi) unhandled?  Are files unidentified?

* Improve makefile identification and counting.
  Currently the makefiles count "all non-blank lines"; conceivably
  someone might want to count only the actual directives, not the
  conditions under which they fire.
  Need to handle ".rules" too.

TODO items specific to the Go implementation start here:

* Support literate Haskell (*.lhs).  A couple of examples have been copied
  into tests/ from the sloccount distribution.
