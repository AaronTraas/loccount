= loccount(1) =
:doctype: manpage

== NAME ==
loccount - count lines of code in a source tree and perform cost estimation

== SYNOPSIS ==
*loccount* [-c] [-i] [-l] [-u] [-x pathlist] [-?] file-or-dir

== DESCRIPTION ==

This program counts source lines of code (SLOC) in one or more files
or directories given on the command line.  A line of code is counted
if it (a) includes characters other than whitespace and a terminating
newline, and (b) is not composed solely of a comment or part of a
comment.

Optionally, this program can perform a cost estimation using the
COCOMO I model. It uses the "organic"  profile of COCOMO I, which is
generally appropriate for open-source projects.

SLOC figures should be used with caution.  While they do predict
project costs reasonably well, they are not appropriate for use as
'productivity' measures; good code is often less bulky than bad code.
Comparing SLOC across languages is also dubious, as differing
languages can have very different complexity per line.

With these qualifications, SLOC does have some other uses. It
is quite effective for tracking changes in complexity and attack
surface as a codebase changes over time.

All languages in common use on Unix-like operating systems are supported.
For a full list of supported languages, run "loccount -l". Note that
"shell" includes bash, dash, ksh, and other similar variants descended
from the Bourne shell.

The program also emits counts for build recipes - Makefiles, autoconf
specifications, scons recipes, and waf scripts. Generated Makefiles
are recognized and ignored.

Languages are recognized by file extension or filename pattern;
executable filenames without an extension are mined for #! lines
identifying an interpreter.  Files that cannot be classified in
this way are skipped, but a list of files skipped in this way
is available with the -u option.

Some file types are identified and silently skipped without being
reported by -u; these include .o, .a, and .so object files, various
kinds of image files, and the .pyc/.pyo files produced by the Python
interpreter.  All files and directories named with a leading dot are
also silently skipped (in particular, this ignores metadata associated
with versopn-control systems).

== OPTIONS ==
-?::
Display usage summary and quit.

-c::
Report a COCOMO II cost estimate. Use the coefficients for the
"organic" project type, which is the best fot for most open-source
projects.

-i::
Report file path, line count, and type for each individual path.

-l::
List supported languages and exit.

-u::
List paths of files that could not be classified into a type.

-g::
generate a picture of the commit graph in the DOT markup language
used by the graphviz tools, rather than fast-exporting.

-x::
Take a comma-separated list of exclusion paths. If a directory is
excluded, all paths beneath it are.

== HISTORY AND COMPATIBILITY ==

The algorithms in this code originated with David A. Wheeler's
*sloccount* utility.  It is, however, more than an order of
magnitude faster than sloccount, and handles some languages (notably
Go, Eiffel, Sather, lua, CLU, and autotools) that sloccount does not.

Generally it will produce close to identical figures to sloccount for
a language supported by both tools; the differences are mainly due to
(a) better detection of some files sloccount left unclassified, and
(b) some philosophical differences about the handling of multiline
string literals in languages such as Python that have them.

Notably, for individual C files you can expect both tools to produce
identical counts.

The base salary used for cost estimation will differ between these
tools depending on time of last release.

== BUGS ==

Lisp sources with a .l extension are rare but not unknown. These
will be mistaken for Lex sources.

PHP #-comments taking up an entire line or following only whitespace
on a line will be counted, not recognized as comments and skipped.

Eiffel indexing comments are counted as code, not text. (This is
arguably a feature.)

The languages MUMPS and occam are unsupported because the file
extensions they use conflict with more-widely used ones (Objective-C
and Fortran respectively).

Literate Haskell (.lhs) is not supported, nor is asm.
(These omissions are regressions from sloccount).

== REPORTING BUGS ==
Report bugs to Eric S. Raymond <esr@thyrsus.com>.
